// Implementation file for parser generated by fsyacc
#light
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 4 "pars.fsy"


open Strangelights.ExpressionParser.Ast


# 12 "pars.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LPAREN
  | RPAREN
  | EOF
  | MULTI
  | DIV
  | PLUS
  | MINUS
  | FLOAT of (System.Double)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_MULTI
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_FLOAT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startExpression
    | NONTERM_Expression

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | LPAREN  -> 0 
  | RPAREN  -> 1 
  | EOF  -> 2 
  | MULTI  -> 3 
  | DIV  -> 4 
  | PLUS  -> 5 
  | MINUS  -> 6 
  | FLOAT _ -> 7 
  | ID _ -> 8 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LPAREN 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_MULTI 
  | 4 -> TOKEN_DIV 
  | 5 -> TOKEN_PLUS 
  | 6 -> TOKEN_MINUS 
  | 7 -> TOKEN_FLOAT 
  | 8 -> TOKEN_ID 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startExpression 
    | 1 -> NONTERM_Expression 
    | 2 -> NONTERM_Expression 
    | 3 -> NONTERM_Expression 
    | 4 -> NONTERM_Expression 
    | 5 -> NONTERM_Expression 
    | 6 -> NONTERM_Expression 
    | 7 -> NONTERM_Expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | MULTI  -> "MULTI" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | FLOAT _ -> "FLOAT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | MULTI  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 6us; 65535us; 0us; 1us; 4us; 5us; 11us; 7us; 12us; 8us; 13us; 9us; 14us; 10us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 5us; 0us; 4us; 5us; 6us; 7us; 1us; 1us; 1us; 2us; 1us; 3us; 5us; 3us; 4us; 5us; 6us; 7us; 1us; 3us; 5us; 4us; 4us; 5us; 6us; 7us; 5us; 4us; 5us; 5us; 6us; 7us; 5us; 4us; 5us; 6us; 6us; 7us; 5us; 4us; 5us; 6us; 7us; 7us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 8us; 10us; 12us; 14us; 20us; 22us; 28us; 34us; 40us; 46us; 48us; 50us; 52us; |]
let _fsyacc_action_rows = 15
let _fsyacc_actionTableElements = [|3us; 32768us; 0us; 4us; 7us; 3us; 8us; 2us; 4us; 49152us; 3us; 11us; 4us; 12us; 5us; 13us; 6us; 14us; 0us; 16385us; 0us; 16386us; 3us; 32768us; 0us; 4us; 7us; 3us; 8us; 2us; 5us; 32768us; 1us; 6us; 3us; 11us; 4us; 12us; 5us; 13us; 6us; 14us; 0us; 16387us; 3us; 16388us; 4us; 12us; 5us; 13us; 6us; 14us; 2us; 16389us; 5us; 13us; 6us; 14us; 1us; 16390us; 6us; 14us; 0us; 16391us; 3us; 32768us; 0us; 4us; 7us; 3us; 8us; 2us; 3us; 32768us; 0us; 4us; 7us; 3us; 8us; 2us; 3us; 32768us; 0us; 4us; 7us; 3us; 8us; 2us; 3us; 32768us; 0us; 4us; 7us; 3us; 8us; 2us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 9us; 10us; 11us; 15us; 21us; 22us; 26us; 29us; 31us; 32us; 36us; 40us; 44us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_immediateActions = [|65535us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 123 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startExpression));
# 132 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "pars.fsy"
                      Ident(_1) 
                   )
# 23 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
# 143 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "pars.fsy"
                       Val(_1)  
                   )
# 24 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
# 154 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "pars.fsy"
                       _2  
                   )
# 25 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
# 165 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "pars.fsy"
                       Multi(_1, _3)  
                   )
# 26 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
# 177 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "pars.fsy"
                       Div(_1, _3)  
                   )
# 27 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
# 189 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "pars.fsy"
                       Plus(_1, _3)  
                   )
# 28 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
# 201 "pars.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data :  Strangelights.ExpressionParser.Ast.Expr )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "pars.fsy"
                       Minus(_1, _3)  
                   )
# 29 "pars.fsy"
                 :  Strangelights.ExpressionParser.Ast.Expr ));
|]
# 214 "pars.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Expression lexer lexbuf :  Strangelights.ExpressionParser.Ast.Expr  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
